---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

const allPosts = await getCollection('blog');
const sortedPosts = allPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Imagen de marcador de posición
const placeholderImage = '/placeholder.jpg';

// Configuración de la paginación
const postsPerPage = 9;
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);

const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString();
---

<Layout title="Todos los Posts | Mi Blog en Astro" description="Explora todos los artículos de nuestro blog">
  <h1 class="text-4xl font-bold mb-8 text-gray-900 dark:text-gray-100">Todos los Posts</h1>

  <div class="mb-8 relative">
    <input 
      type="text" 
      id="search-input" 
      placeholder="Buscar posts..." 
      class="w-full p-2 pl-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 absolute left-3 top-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
    </svg>
  </div>

  <div id="posts-container" class="grid gap-8 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
    {sortedPosts.map((post) => (
      <article class="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden" data-title={post.data.title.toLowerCase()} data-description={post.data.description.toLowerCase()}>
        <Image 
          src={post.data.image || placeholderImage}
          alt={post.data.imageAlt || 'Imagen del post'}
          width={400}
          height={200}
          class="w-full h-48 object-cover" loading="eager" decoding="async"
        />
        <div class="p-6 bg-[#f7dbed] flex flex-col justify-between h-[300px]">
          <h3 class="text-xl font-semibold text-gray-900 mb-2">{post.data.title}</h3>
          <p class="text-gray-600 dark:text-gray-300 mb-4">{post.data.description}</p>
          <a href={`/blog/${post.slug}`} class="inline-block bg-black text-white py-2 px-4 rounded-3xl hover:bg-[#272727] transition-colors w-fit">Leer más</a>
        </div>
      </article>
    ))}
  </div>

  <div id="pagination" class="mt-8 flex justify-center space-x-2">
    {Array.from({ length: totalPages }).map((_, i) => (
      <button class="px-4 py-2 rounded-md text-black hover:text-white hover:bg-black">
        {i + 1}
      </button>
    ))}
  </div>
</Layout>

<script>
  function setupSearch() {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const postsContainer = document.getElementById('posts-container');
    const posts = postsContainer?.getElementsByTagName('article');
    const paginationContainer = document.getElementById('pagination');

    if (searchInput && posts) {
      searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        
        Array.from(posts).forEach((post) => {
          const title = post.getAttribute('data-title') || '';
          const description = post.getAttribute('data-description') || '';
          const isVisible = title.includes(searchTerm) || description.includes(searchTerm);
          post.style.display = isVisible ? '' : 'none';
        });

        // Ocultar paginación durante la búsqueda
        if (paginationContainer) {
          paginationContainer.style.display = searchTerm ? 'none' : 'flex';
        }
      });
    }
  }

  function setupPagination() {
    const postsContainer = document.getElementById('posts-container');
    const paginationContainer = document.getElementById('pagination');
    const posts = postsContainer?.getElementsByTagName('article');
    const postsPerPage = 9;

    if (posts && paginationContainer) {
      const paginationButtons = paginationContainer.getElementsByTagName('button');

      function showPage(pageNum) {
        const start = (pageNum - 1) * postsPerPage;
        const end = start + postsPerPage;

        Array.from(posts).forEach((post, index) => {
          post.style.display = (index >= start && index < end) ? '' : 'none';
        });

        Array.from(paginationButtons).forEach((button, index) => {
          button.classList.toggle('border', index === pageNum - 1);
          button.classList.toggle('text-black', index === pageNum - 1);
        });
      }

      Array.from(paginationButtons).forEach((button, index) => {
        button.addEventListener('click', () => showPage(index + 1));
      });

      // Mostrar la primera página inicialmente
      showPage(1);
    }
  }

  // Ejecutar las funciones cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    setupSearch();
    setupPagination();
  });

  // Ejecutar las funciones cuando se navegue entre páginas con View Transitions
  document.addEventListener('astro:page-load', () => {
    setupSearch();
    setupPagination();
  });
</script>